//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoBRA.IntegracaoProduto.WS.DAL.Acesso
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EBSAEntities : DbContext
    {
        public EBSAEntities()
            : base("name=EBSAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ANT_ANO_EDUCACAO> ANT_ANO_EDUCACAO { get; set; }
        public virtual DbSet<ANT_ASSUNTO> ANT_ASSUNTO { get; set; }
        public virtual DbSet<ANT_AUTORIA> ANT_AUTORIA { get; set; }
        public virtual DbSet<ANT_COLECAO> ANT_COLECAO { get; set; }
        public virtual DbSet<ANT_COMPOSICAO> ANT_COMPOSICAO { get; set; }
        public virtual DbSet<ANT_CONTEUDO_DISCIPLINAR> ANT_CONTEUDO_DISCIPLINAR { get; set; }
        public virtual DbSet<ANT_DATA_ESPECIAL> ANT_DATA_ESPECIAL { get; set; }
        public virtual DbSet<ANT_DISCIPLINA> ANT_DISCIPLINA { get; set; }
        public virtual DbSet<ANT_DISCIPLINA_TIPO> ANT_DISCIPLINA_TIPO { get; set; }
        public virtual DbSet<ANT_DOCUMENTOSAUTORIA> ANT_DOCUMENTOSAUTORIA { get; set; }
        public virtual DbSet<ANT_ESPECIFICACAO_TECNICA> ANT_ESPECIFICACAO_TECNICA { get; set; }
        public virtual DbSet<ANT_FAIXA_ETARIA> ANT_FAIXA_ETARIA { get; set; }
        public virtual DbSet<ANT_FichaTecnica> ANT_FichaTecnica { get; set; }
        public virtual DbSet<ANT_FUNCAO> ANT_FUNCAO { get; set; }
        public virtual DbSet<ANT_GENERO_TEXTUAL> ANT_GENERO_TEXTUAL { get; set; }
        public virtual DbSet<ANT_LOGS> ANT_LOGS { get; set; }
        public virtual DbSet<ANT_MIDIA> ANT_MIDIA { get; set; }
        public virtual DbSet<ANT_PRODUTO_ASSUNTO> ANT_PRODUTO_ASSUNTO { get; set; }
        public virtual DbSet<ANT_PRODUTO_DATAESPECIAL> ANT_PRODUTO_DATAESPECIAL { get; set; }
        public virtual DbSet<ANT_PRODUTO_DOCUMENTO> ANT_PRODUTO_DOCUMENTO { get; set; }
        public virtual DbSet<ANT_PRODUTO_ESPTECNICA> ANT_PRODUTO_ESPTECNICA { get; set; }
        public virtual DbSet<ANT_PRODUTO_FUNCAO> ANT_PRODUTO_FUNCAO { get; set; }
        public virtual DbSet<ANT_PRODUTO_TEMA> ANT_PRODUTO_TEMA { get; set; }
        public virtual DbSet<ANT_PRODUTO_TEMATRANS> ANT_PRODUTO_TEMATRANS { get; set; }
        public virtual DbSet<ANT_TEMA> ANT_TEMA { get; set; }
        public virtual DbSet<ANT_TIPO> ANT_TIPO { get; set; }
        public virtual DbSet<ANT_TIPO_LOG> ANT_TIPO_LOG { get; set; }
        public virtual DbSet<ANT_TIPO_SISTEMA> ANT_TIPO_SISTEMA { get; set; }
        public virtual DbSet<BKP_TB_PERMISSAO_REQUISICAO> BKP_TB_PERMISSAO_REQUISICAO { get; set; }
        public virtual DbSet<CARGO> CARGOes { get; set; }
        public virtual DbSet<Convite_Consultor> Convite_Consultor { get; set; }
        public virtual DbSet<Convites_Solicitados_Consultor> Convites_Solicitados_Consultor { get; set; }
        public virtual DbSet<ESTADO> ESTADOes { get; set; }
        public virtual DbSet<FICHATECNICA_BKP> FICHATECNICA_BKP { get; set; }
        public virtual DbSet<FILIAL> FILIALs { get; set; }
        public virtual DbSet<Flipbook_Consultor> Flipbook_Consultor { get; set; }
        public virtual DbSet<Flipbook_Consultor_bkp> Flipbook_Consultor_bkp { get; set; }
        public virtual DbSet<GERENTE_SUPERVISOR_REGIAO> GERENTE_SUPERVISOR_REGIAO { get; set; }
        public virtual DbSet<GRUPO> GRUPOes { get; set; }
        public virtual DbSet<HISTORICO_INTEGRACAO_PROTHEUS> HISTORICO_INTEGRACAO_PROTHEUS { get; set; }
        public virtual DbSet<INTEGRACAO_ADMPORTAL_CONSULTOR> INTEGRACAO_ADMPORTAL_CONSULTOR { get; set; }
        public virtual DbSet<Log_Acesso_Consultor> Log_Acesso_Consultor { get; set; }
        public virtual DbSet<LOG> LOGS { get; set; }
        public virtual DbSet<MENU> MENUs { get; set; }
        public virtual DbSet<MENU_GRUPO> MENU_GRUPO { get; set; }
        public virtual DbSet<NIVEL> NIVELs { get; set; }
        public virtual DbSet<PERIODO> PERIODOes { get; set; }
        public virtual DbSet<PESSOA> PESSOAs { get; set; }
        public virtual DbSet<PLATAFORMA> PLATAFORMAs { get; set; }
        public virtual DbSet<PRODUTO> PRODUTOes { get; set; }
        public virtual DbSet<PRODUTO_BKP> PRODUTO_BKP { get; set; }
        public virtual DbSet<Produto_Status> Produto_Status { get; set; }
        public virtual DbSet<RAMAIS_FAVORITOS> RAMAIS_FAVORITOS { get; set; }
        public virtual DbSet<REQUISICAO> REQUISICAOs { get; set; }
        public virtual DbSet<REQUISICAO_OBRA> REQUISICAO_OBRA { get; set; }
        public virtual DbSet<REQUISICAO_PARCELA> REQUISICAO_PARCELA { get; set; }
        public virtual DbSet<REQUISICAO_SERVICO> REQUISICAO_SERVICO { get; set; }
        public virtual DbSet<SEGMENTO> SEGMENTOes { get; set; }
        public virtual DbSet<SUPERVISOR_DIVULGADOR> SUPERVISOR_DIVULGADOR { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TB_ABA_CADASTRO_PRODUTO> TB_ABA_CADASTRO_PRODUTO { get; set; }
        public virtual DbSet<TB_CABECALHO_PAINEL_META> TB_CABECALHO_PAINEL_META { get; set; }
        public virtual DbSet<TB_CADERNO_PRODUTO> TB_CADERNO_PRODUTO { get; set; }
        public virtual DbSet<TB_CAMPO_ORIGEM> TB_CAMPO_ORIGEM { get; set; }
        public virtual DbSet<TB_CAPA_PRODUTO> TB_CAPA_PRODUTO { get; set; }
        public virtual DbSet<TB_CARGO> TB_CARGO { get; set; }
        public virtual DbSet<TB_COLLECTION_ELVIS> TB_COLLECTION_ELVIS { get; set; }
        public virtual DbSet<TB_CONDICAO_COMERCIAL> TB_CONDICAO_COMERCIAL { get; set; }
        public virtual DbSet<TB_CONSULTOR_REGIAO> TB_CONSULTOR_REGIAO { get; set; }
        public virtual DbSet<TB_CONTEUDO_PP> TB_CONTEUDO_PP { get; set; }
        public virtual DbSet<TB_CONTROLE_IMPRESSAO_PRODUTO> TB_CONTROLE_IMPRESSAO_PRODUTO { get; set; }
        public virtual DbSet<TB_ENCARTE_PRODUTO> TB_ENCARTE_PRODUTO { get; set; }
        public virtual DbSet<TB_FILIAL> TB_FILIAL { get; set; }
        public virtual DbSet<TB_GERENTE_SUPERVISOR> TB_GERENTE_SUPERVISOR { get; set; }
        public virtual DbSet<TB_GRUPO_PAINEL> TB_GRUPO_PAINEL { get; set; }
        public virtual DbSet<TB_GRUPO_PROTHEUS> TB_GRUPO_PROTHEUS { get; set; }
        public virtual DbSet<TB_HIERARQUIA_PAINEL> TB_HIERARQUIA_PAINEL { get; set; }
        public virtual DbSet<TB_HISTORICO_IMPRESSAO> TB_HISTORICO_IMPRESSAO { get; set; }
        public virtual DbSet<TB_JSON_LOG_INTEGRACAO_PROTHEUS> TB_JSON_LOG_INTEGRACAO_PROTHEUS { get; set; }
        public virtual DbSet<TB_LINHA_PAINEL_META> TB_LINHA_PAINEL_META { get; set; }
        public virtual DbSet<TB_LIVRO_ELVIS> TB_LIVRO_ELVIS { get; set; }
        public virtual DbSet<TB_META_ANUAL> TB_META_ANUAL { get; set; }
        public virtual DbSet<TB_META_FINANCEIRA> TB_META_FINANCEIRA { get; set; }
        public virtual DbSet<TB_META_REAL> TB_META_REAL { get; set; }
        public virtual DbSet<TB_MIDIA_PRODUTO> TB_MIDIA_PRODUTO { get; set; }
        public virtual DbSet<TB_MIOLO_PRODUTO> TB_MIOLO_PRODUTO { get; set; }
        public virtual DbSet<TB_ORIGEM> TB_ORIGEM { get; set; }
        public virtual DbSet<TB_ORIGEM_DADOS_PAINEL_META> TB_ORIGEM_DADOS_PAINEL_META { get; set; }
        public virtual DbSet<TB_PARTE_LIVRO_ELVIS> TB_PARTE_LIVRO_ELVIS { get; set; }
        public virtual DbSet<TB_PERIODO_META> TB_PERIODO_META { get; set; }
        public virtual DbSet<TB_PERMISSAO_REQUISICAO> TB_PERMISSAO_REQUISICAO { get; set; }
        public virtual DbSet<TB_PLATAFORMA_MIDIA> TB_PLATAFORMA_MIDIA { get; set; }
        public virtual DbSet<TB_PREFERENCIAS_RELATORIO> TB_PREFERENCIAS_RELATORIO { get; set; }
        public virtual DbSet<TB_PRODUTO_EPUB> TB_PRODUTO_EPUB { get; set; }
        public virtual DbSet<TB_PRODUTO_IMAGEM_CAPA> TB_PRODUTO_IMAGEM_CAPA { get; set; }
        public virtual DbSet<TB_REGIAO> TB_REGIAO { get; set; }
        public virtual DbSet<TB_REGIAO_ATUACAO> TB_REGIAO_ATUACAO { get; set; }
        public virtual DbSet<TB_REGRA_ACESSO_ABA_CADASTRO_PRODUTO> TB_REGRA_ACESSO_ABA_CADASTRO_PRODUTO { get; set; }
        public virtual DbSet<TB_REGRA_ACESSO_MENU_CADASTRO_PRODUTO> TB_REGRA_ACESSO_MENU_CADASTRO_PRODUTO { get; set; }
        public virtual DbSet<TB_RESULTADO_PAGAMENTO_META> TB_RESULTADO_PAGAMENTO_META { get; set; }
        public virtual DbSet<TB_SECAO> TB_SECAO { get; set; }
        public virtual DbSet<TB_SEGMENTO_PROTHEUS> TB_SEGMENTO_PROTHEUS { get; set; }
        public virtual DbSet<TB_SELO_PROTHEUS> TB_SELO_PROTHEUS { get; set; }
        public virtual DbSet<TB_SISTEMA_ORIGEM> TB_SISTEMA_ORIGEM { get; set; }
        public virtual DbSet<TB_STATUS_PAINEL> TB_STATUS_PAINEL { get; set; }
        public virtual DbSet<TB_SUPERVISOR_CONSULTOR> TB_SUPERVISOR_CONSULTOR { get; set; }
        public virtual DbSet<TB_TABELA_ORIGEM> TB_TABELA_ORIGEM { get; set; }
        public virtual DbSet<TB_TIPO_ESPEC> TB_TIPO_ESPEC { get; set; }
        public virtual DbSet<TB_TIPO_PRODUTO> TB_TIPO_PRODUTO { get; set; }
        public virtual DbSet<TB_UNIDADE_MEDIDA> TB_UNIDADE_MEDIDA { get; set; }
        public virtual DbSet<TB_UNIDADE_MEDIDA_PAINEL> TB_UNIDADE_MEDIDA_PAINEL { get; set; }
        public virtual DbSet<TB_USUARIO_RM> TB_USUARIO_RM { get; set; }
        public virtual DbSet<TB_USUARIO_RM_INTEGRACAO> TB_USUARIO_RM_INTEGRACAO { get; set; }
        public virtual DbSet<USUARIO> USUARIOs { get; set; }
        public virtual DbSet<USUARIO_API_PRODUTO> USUARIO_API_PRODUTO { get; set; }
        public virtual DbSet<USUARIO_GRUPO> USUARIO_GRUPO { get; set; }
        public virtual DbSet<ANO_EDUCACAO> ANO_EDUCACAO { get; set; }
        public virtual DbSet<ANT_A_TIPO_SISTEMA> ANT_A_TIPO_SISTEMA { get; set; }
        public virtual DbSet<ANT_PRODUTO> ANT_PRODUTO { get; set; }
        public virtual DbSet<ANT_T_AUTORIA> ANT_T_AUTORIA { get; set; }
        public virtual DbSet<ANT_T_COLECAO> ANT_T_COLECAO { get; set; }
        public virtual DbSet<ANT_T_HISTORICO_INTEGRACAO_PROTHEUS> ANT_T_HISTORICO_INTEGRACAO_PROTHEUS { get; set; }
        public virtual DbSet<ANT_T_PRODUTO_TEMATRANS> ANT_T_PRODUTO_TEMATRANS { get; set; }
        public virtual DbSet<ANT_TIPO_ESPECIFICACAO> ANT_TIPO_ESPECIFICACAO { get; set; }
        public virtual DbSet<ASSUNTO> ASSUNTOes { get; set; }
        public virtual DbSet<AUTOR> AUTORs { get; set; }
        public virtual DbSet<AUTORIA> AUTORIAs { get; set; }
        public virtual DbSet<COLECAO> COLECAOs { get; set; }
        public virtual DbSet<COMPOSICAO> COMPOSICAOs { get; set; }
        public virtual DbSet<CONTEUDO_DISCIPLINAR> CONTEUDO_DISCIPLINAR { get; set; }
        public virtual DbSet<DATA_ESPECIAL> DATA_ESPECIAL { get; set; }
        public virtual DbSet<DISCIPLINA> DISCIPLINAs { get; set; }
        public virtual DbSet<DISCIPLINA_TIPO> DISCIPLINA_TIPO { get; set; }
        public virtual DbSet<DOCUMENTOSAUTORIA> DOCUMENTOSAUTORIAs { get; set; }
        public virtual DbSet<ENVIO_APROVACAO> ENVIO_APROVACAO { get; set; }
        public virtual DbSet<ENVIO_OBRA_ELVIS> ENVIO_OBRA_ELVIS { get; set; }
        public virtual DbSet<ESPECIFICACAO_TECNICA> ESPECIFICACAO_TECNICA { get; set; }
        public virtual DbSet<FAIXA_ETARIA> FAIXA_ETARIA { get; set; }
        public virtual DbSet<FASE_SERVICO> FASE_SERVICO { get; set; }
        public virtual DbSet<FichaTecnica> FichaTecnicas { get; set; }
        public virtual DbSet<Flipbook_Acesso_Consultor> Flipbook_Acesso_Consultor { get; set; }
        public virtual DbSet<FUNCAO> FUNCAOs { get; set; }
        public virtual DbSet<GENERO_TEXTUAL> GENERO_TEXTUAL { get; set; }
        public virtual DbSet<LIVRO> LIVROes { get; set; }
        public virtual DbSet<Log_Flipbook_Consultor> Log_Flipbook_Consultor { get; set; }
        public virtual DbSet<LOGS_A> LOGS_A { get; set; }
        public virtual DbSet<MIDIA> MIDIAs { get; set; }
        public virtual DbSet<Planilha1_> Planilha1_ { get; set; }
        public virtual DbSet<PRODUTO_ASSUNTO> PRODUTO_ASSUNTO { get; set; }
        public virtual DbSet<PRODUTO_BKP08012020> PRODUTO_BKP08012020 { get; set; }
        public virtual DbSet<PRODUTO_DATAESPECIAL> PRODUTO_DATAESPECIAL { get; set; }
        public virtual DbSet<PRODUTO_DOCUMENTO> PRODUTO_DOCUMENTO { get; set; }
        public virtual DbSet<PRODUTO_ESPTECNICA> PRODUTO_ESPTECNICA { get; set; }
        public virtual DbSet<PRODUTO_FUNCAO> PRODUTO_FUNCAO { get; set; }
        public virtual DbSet<PRODUTO_TEMA> PRODUTO_TEMA { get; set; }
        public virtual DbSet<PRODUTO_TEMATRANS> PRODUTO_TEMATRANS { get; set; }
        public virtual DbSet<TB_RELATORIO_ELVIS> TB_RELATORIO_ELVIS { get; set; }
        public virtual DbSet<TEMA> TEMAs { get; set; }
        public virtual DbSet<TIPO> TIPOes { get; set; }
        public virtual DbSet<TIPO_ESPECIFICACAO> TIPO_ESPECIFICACAO { get; set; }
        public virtual DbSet<TIPO_LOG> TIPO_LOG { get; set; }
        public virtual DbSet<TIPO_SISTEMA> TIPO_SISTEMA { get; set; }
        public virtual DbSet<TMPDATAPRODUCT> TMPDATAPRODUCTs { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_I_FICHATECNICA(Nullable<decimal> prod_id, Nullable<decimal> paginas, Nullable<decimal> formatoAlura, Nullable<decimal> formatoLargura, Nullable<decimal> peso, string mioloCores, string mioloTipoPapel, string mioloGramatura, string mioloObservacoes, string capaCores, string capaTipoPapel, string capaGramatura, string capaOrelha, string capaAcabamento, string capaObservacoes, string capaAcabamentoDaLombada, Nullable<decimal> cadernoPaginas, Nullable<decimal> cadernoAltura, Nullable<decimal> cadernoLargura, Nullable<int> cadernoTipo, string cadernoTipoOutros, Nullable<decimal> cadernoPeso, string cadernoMioloCores, string cadernoMioloTipoPapel, string cadernoMioloGramatura, string cadernoMioloObservacoes, string cadernoCapaCores, string cadernoCapaTipoPapel, string cadernoCapaGramatura, string cadernoCapaOrelha, string cadernoCapaAcabamento, string cadernoCapaObservacoes, string cadernoCapaAcabamentoDaLombada, Nullable<int> encarteTipo, string encarteAcabamento, string encartePapel, Nullable<int> caixaFormato, string caixaAcabamento, string caixaPapel, Nullable<int> midia, string observacoesGerais, string foto, string fotoCaminhoAbsoluto)
        {
            var prod_idParameter = prod_id.HasValue ?
                new ObjectParameter("Prod_id", prod_id) :
                new ObjectParameter("Prod_id", typeof(decimal));
    
            var paginasParameter = paginas.HasValue ?
                new ObjectParameter("Paginas", paginas) :
                new ObjectParameter("Paginas", typeof(decimal));
    
            var formatoAluraParameter = formatoAlura.HasValue ?
                new ObjectParameter("FormatoAlura", formatoAlura) :
                new ObjectParameter("FormatoAlura", typeof(decimal));
    
            var formatoLarguraParameter = formatoLargura.HasValue ?
                new ObjectParameter("FormatoLargura", formatoLargura) :
                new ObjectParameter("FormatoLargura", typeof(decimal));
    
            var pesoParameter = peso.HasValue ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(decimal));
    
            var mioloCoresParameter = mioloCores != null ?
                new ObjectParameter("MioloCores", mioloCores) :
                new ObjectParameter("MioloCores", typeof(string));
    
            var mioloTipoPapelParameter = mioloTipoPapel != null ?
                new ObjectParameter("MioloTipoPapel", mioloTipoPapel) :
                new ObjectParameter("MioloTipoPapel", typeof(string));
    
            var mioloGramaturaParameter = mioloGramatura != null ?
                new ObjectParameter("MioloGramatura", mioloGramatura) :
                new ObjectParameter("MioloGramatura", typeof(string));
    
            var mioloObservacoesParameter = mioloObservacoes != null ?
                new ObjectParameter("MioloObservacoes", mioloObservacoes) :
                new ObjectParameter("MioloObservacoes", typeof(string));
    
            var capaCoresParameter = capaCores != null ?
                new ObjectParameter("CapaCores", capaCores) :
                new ObjectParameter("CapaCores", typeof(string));
    
            var capaTipoPapelParameter = capaTipoPapel != null ?
                new ObjectParameter("CapaTipoPapel", capaTipoPapel) :
                new ObjectParameter("CapaTipoPapel", typeof(string));
    
            var capaGramaturaParameter = capaGramatura != null ?
                new ObjectParameter("CapaGramatura", capaGramatura) :
                new ObjectParameter("CapaGramatura", typeof(string));
    
            var capaOrelhaParameter = capaOrelha != null ?
                new ObjectParameter("CapaOrelha", capaOrelha) :
                new ObjectParameter("CapaOrelha", typeof(string));
    
            var capaAcabamentoParameter = capaAcabamento != null ?
                new ObjectParameter("CapaAcabamento", capaAcabamento) :
                new ObjectParameter("CapaAcabamento", typeof(string));
    
            var capaObservacoesParameter = capaObservacoes != null ?
                new ObjectParameter("CapaObservacoes", capaObservacoes) :
                new ObjectParameter("CapaObservacoes", typeof(string));
    
            var capaAcabamentoDaLombadaParameter = capaAcabamentoDaLombada != null ?
                new ObjectParameter("CapaAcabamentoDaLombada", capaAcabamentoDaLombada) :
                new ObjectParameter("CapaAcabamentoDaLombada", typeof(string));
    
            var cadernoPaginasParameter = cadernoPaginas.HasValue ?
                new ObjectParameter("CadernoPaginas", cadernoPaginas) :
                new ObjectParameter("CadernoPaginas", typeof(decimal));
    
            var cadernoAlturaParameter = cadernoAltura.HasValue ?
                new ObjectParameter("CadernoAltura", cadernoAltura) :
                new ObjectParameter("CadernoAltura", typeof(decimal));
    
            var cadernoLarguraParameter = cadernoLargura.HasValue ?
                new ObjectParameter("CadernoLargura", cadernoLargura) :
                new ObjectParameter("CadernoLargura", typeof(decimal));
    
            var cadernoTipoParameter = cadernoTipo.HasValue ?
                new ObjectParameter("CadernoTipo", cadernoTipo) :
                new ObjectParameter("CadernoTipo", typeof(int));
    
            var cadernoTipoOutrosParameter = cadernoTipoOutros != null ?
                new ObjectParameter("CadernoTipoOutros", cadernoTipoOutros) :
                new ObjectParameter("CadernoTipoOutros", typeof(string));
    
            var cadernoPesoParameter = cadernoPeso.HasValue ?
                new ObjectParameter("CadernoPeso", cadernoPeso) :
                new ObjectParameter("CadernoPeso", typeof(decimal));
    
            var cadernoMioloCoresParameter = cadernoMioloCores != null ?
                new ObjectParameter("CadernoMioloCores", cadernoMioloCores) :
                new ObjectParameter("CadernoMioloCores", typeof(string));
    
            var cadernoMioloTipoPapelParameter = cadernoMioloTipoPapel != null ?
                new ObjectParameter("CadernoMioloTipoPapel", cadernoMioloTipoPapel) :
                new ObjectParameter("CadernoMioloTipoPapel", typeof(string));
    
            var cadernoMioloGramaturaParameter = cadernoMioloGramatura != null ?
                new ObjectParameter("CadernoMioloGramatura", cadernoMioloGramatura) :
                new ObjectParameter("CadernoMioloGramatura", typeof(string));
    
            var cadernoMioloObservacoesParameter = cadernoMioloObservacoes != null ?
                new ObjectParameter("CadernoMioloObservacoes", cadernoMioloObservacoes) :
                new ObjectParameter("CadernoMioloObservacoes", typeof(string));
    
            var cadernoCapaCoresParameter = cadernoCapaCores != null ?
                new ObjectParameter("CadernoCapaCores", cadernoCapaCores) :
                new ObjectParameter("CadernoCapaCores", typeof(string));
    
            var cadernoCapaTipoPapelParameter = cadernoCapaTipoPapel != null ?
                new ObjectParameter("CadernoCapaTipoPapel", cadernoCapaTipoPapel) :
                new ObjectParameter("CadernoCapaTipoPapel", typeof(string));
    
            var cadernoCapaGramaturaParameter = cadernoCapaGramatura != null ?
                new ObjectParameter("CadernoCapaGramatura", cadernoCapaGramatura) :
                new ObjectParameter("CadernoCapaGramatura", typeof(string));
    
            var cadernoCapaOrelhaParameter = cadernoCapaOrelha != null ?
                new ObjectParameter("CadernoCapaOrelha", cadernoCapaOrelha) :
                new ObjectParameter("CadernoCapaOrelha", typeof(string));
    
            var cadernoCapaAcabamentoParameter = cadernoCapaAcabamento != null ?
                new ObjectParameter("CadernoCapaAcabamento", cadernoCapaAcabamento) :
                new ObjectParameter("CadernoCapaAcabamento", typeof(string));
    
            var cadernoCapaObservacoesParameter = cadernoCapaObservacoes != null ?
                new ObjectParameter("CadernoCapaObservacoes", cadernoCapaObservacoes) :
                new ObjectParameter("CadernoCapaObservacoes", typeof(string));
    
            var cadernoCapaAcabamentoDaLombadaParameter = cadernoCapaAcabamentoDaLombada != null ?
                new ObjectParameter("CadernoCapaAcabamentoDaLombada", cadernoCapaAcabamentoDaLombada) :
                new ObjectParameter("CadernoCapaAcabamentoDaLombada", typeof(string));
    
            var encarteTipoParameter = encarteTipo.HasValue ?
                new ObjectParameter("EncarteTipo", encarteTipo) :
                new ObjectParameter("EncarteTipo", typeof(int));
    
            var encarteAcabamentoParameter = encarteAcabamento != null ?
                new ObjectParameter("EncarteAcabamento", encarteAcabamento) :
                new ObjectParameter("EncarteAcabamento", typeof(string));
    
            var encartePapelParameter = encartePapel != null ?
                new ObjectParameter("EncartePapel", encartePapel) :
                new ObjectParameter("EncartePapel", typeof(string));
    
            var caixaFormatoParameter = caixaFormato.HasValue ?
                new ObjectParameter("CaixaFormato", caixaFormato) :
                new ObjectParameter("CaixaFormato", typeof(int));
    
            var caixaAcabamentoParameter = caixaAcabamento != null ?
                new ObjectParameter("CaixaAcabamento", caixaAcabamento) :
                new ObjectParameter("CaixaAcabamento", typeof(string));
    
            var caixaPapelParameter = caixaPapel != null ?
                new ObjectParameter("CaixaPapel", caixaPapel) :
                new ObjectParameter("CaixaPapel", typeof(string));
    
            var midiaParameter = midia.HasValue ?
                new ObjectParameter("Midia", midia) :
                new ObjectParameter("Midia", typeof(int));
    
            var observacoesGeraisParameter = observacoesGerais != null ?
                new ObjectParameter("ObservacoesGerais", observacoesGerais) :
                new ObjectParameter("ObservacoesGerais", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(string));
    
            var fotoCaminhoAbsolutoParameter = fotoCaminhoAbsoluto != null ?
                new ObjectParameter("FotoCaminhoAbsoluto", fotoCaminhoAbsoluto) :
                new ObjectParameter("FotoCaminhoAbsoluto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_I_FICHATECNICA", prod_idParameter, paginasParameter, formatoAluraParameter, formatoLarguraParameter, pesoParameter, mioloCoresParameter, mioloTipoPapelParameter, mioloGramaturaParameter, mioloObservacoesParameter, capaCoresParameter, capaTipoPapelParameter, capaGramaturaParameter, capaOrelhaParameter, capaAcabamentoParameter, capaObservacoesParameter, capaAcabamentoDaLombadaParameter, cadernoPaginasParameter, cadernoAlturaParameter, cadernoLarguraParameter, cadernoTipoParameter, cadernoTipoOutrosParameter, cadernoPesoParameter, cadernoMioloCoresParameter, cadernoMioloTipoPapelParameter, cadernoMioloGramaturaParameter, cadernoMioloObservacoesParameter, cadernoCapaCoresParameter, cadernoCapaTipoPapelParameter, cadernoCapaGramaturaParameter, cadernoCapaOrelhaParameter, cadernoCapaAcabamentoParameter, cadernoCapaObservacoesParameter, cadernoCapaAcabamentoDaLombadaParameter, encarteTipoParameter, encarteAcabamentoParameter, encartePapelParameter, caixaFormatoParameter, caixaAcabamentoParameter, caixaPapelParameter, midiaParameter, observacoesGeraisParameter, fotoParameter, fotoCaminhoAbsolutoParameter);
        }
    
        public virtual int SP_I_LOG(Nullable<int> uSUARIO, Nullable<System.DateTime> dATA_LOG, string iP, string dESCRICAO, Nullable<int> tIPO_LOG, Nullable<int> tIPO_SISTEMA)
        {
            var uSUARIOParameter = uSUARIO.HasValue ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(int));
    
            var dATA_LOGParameter = dATA_LOG.HasValue ?
                new ObjectParameter("DATA_LOG", dATA_LOG) :
                new ObjectParameter("DATA_LOG", typeof(System.DateTime));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var dESCRICAOParameter = dESCRICAO != null ?
                new ObjectParameter("DESCRICAO", dESCRICAO) :
                new ObjectParameter("DESCRICAO", typeof(string));
    
            var tIPO_LOGParameter = tIPO_LOG.HasValue ?
                new ObjectParameter("TIPO_LOG", tIPO_LOG) :
                new ObjectParameter("TIPO_LOG", typeof(int));
    
            var tIPO_SISTEMAParameter = tIPO_SISTEMA.HasValue ?
                new ObjectParameter("TIPO_SISTEMA", tIPO_SISTEMA) :
                new ObjectParameter("TIPO_SISTEMA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_I_LOG", uSUARIOParameter, dATA_LOGParameter, iPParameter, dESCRICAOParameter, tIPO_LOGParameter, tIPO_SISTEMAParameter);
        }
    
        public virtual int SP_I_LOG___(Nullable<int> uSUARIO, Nullable<System.DateTime> dATA_LOG, string iP, string dESCRICAO, Nullable<int> tIPO_LOG, Nullable<int> tIPO_SISTEMA)
        {
            var uSUARIOParameter = uSUARIO.HasValue ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(int));
    
            var dATA_LOGParameter = dATA_LOG.HasValue ?
                new ObjectParameter("DATA_LOG", dATA_LOG) :
                new ObjectParameter("DATA_LOG", typeof(System.DateTime));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var dESCRICAOParameter = dESCRICAO != null ?
                new ObjectParameter("DESCRICAO", dESCRICAO) :
                new ObjectParameter("DESCRICAO", typeof(string));
    
            var tIPO_LOGParameter = tIPO_LOG.HasValue ?
                new ObjectParameter("TIPO_LOG", tIPO_LOG) :
                new ObjectParameter("TIPO_LOG", typeof(int));
    
            var tIPO_SISTEMAParameter = tIPO_SISTEMA.HasValue ?
                new ObjectParameter("TIPO_SISTEMA", tIPO_SISTEMA) :
                new ObjectParameter("TIPO_SISTEMA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_I_LOG___", uSUARIOParameter, dATA_LOGParameter, iPParameter, dESCRICAOParameter, tIPO_LOGParameter, tIPO_SISTEMAParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<SP_S_OBTER_FICHATECNICA_Result> SP_S_OBTER_FICHATECNICA(Nullable<int> pRODUTO_ID)
        {
            var pRODUTO_IDParameter = pRODUTO_ID.HasValue ?
                new ObjectParameter("PRODUTO_ID", pRODUTO_ID) :
                new ObjectParameter("PRODUTO_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_S_OBTER_FICHATECNICA_Result>("SP_S_OBTER_FICHATECNICA", pRODUTO_IDParameter);
        }
    
        public virtual ObjectResult<SP_S_OBTER_LOGS_Result> SP_S_OBTER_LOGS(Nullable<System.DateTime> dATA_LOG_INICIAL, Nullable<System.DateTime> dATA_LOG_FINAL, Nullable<int> iD_TIPO_SISTEMA)
        {
            var dATA_LOG_INICIALParameter = dATA_LOG_INICIAL.HasValue ?
                new ObjectParameter("DATA_LOG_INICIAL", dATA_LOG_INICIAL) :
                new ObjectParameter("DATA_LOG_INICIAL", typeof(System.DateTime));
    
            var dATA_LOG_FINALParameter = dATA_LOG_FINAL.HasValue ?
                new ObjectParameter("DATA_LOG_FINAL", dATA_LOG_FINAL) :
                new ObjectParameter("DATA_LOG_FINAL", typeof(System.DateTime));
    
            var iD_TIPO_SISTEMAParameter = iD_TIPO_SISTEMA.HasValue ?
                new ObjectParameter("ID_TIPO_SISTEMA", iD_TIPO_SISTEMA) :
                new ObjectParameter("ID_TIPO_SISTEMA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_S_OBTER_LOGS_Result>("SP_S_OBTER_LOGS", dATA_LOG_INICIALParameter, dATA_LOG_FINALParameter, iD_TIPO_SISTEMAParameter);
        }
    
        public virtual int SP_U_FICHATECNICA(Nullable<decimal> prod_id, Nullable<decimal> paginas, Nullable<decimal> formatoAlura, Nullable<decimal> formatoLargura, Nullable<decimal> peso, string mioloCores, string mioloTipoPapel, string mioloGramatura, string mioloObservacoes, string capaCores, string capaTipoPapel, string capaGramatura, string capaOrelha, string capaAcabamento, string capaObservacoes, string capaAcabamentoDaLombada, Nullable<decimal> cadernoPaginas, Nullable<decimal> cadernoAltura, Nullable<decimal> cadernoLargura, Nullable<int> cadernoTipo, string cadernoTipoOutros, Nullable<decimal> cadernoPeso, string cadernoMioloCores, string cadernoMioloTipoPapel, string cadernoMioloGramatura, string cadernoMioloObservacoes, string cadernoCapaCores, string cadernoCapaTipoPapel, string cadernoCapaGramatura, string cadernoCapaOrelha, string cadernoCapaAcabamento, string cadernoCapaObservacoes, string cadernoCapaAcabamentoDaLombada, Nullable<int> encarteTipo, string encarteAcabamento, string encartePapel, Nullable<int> caixaFormato, string caixaAcabamento, string caixaPapel, Nullable<int> midia, string observacoesGerais, string foto, string fotoCaminhoAbsoluto)
        {
            var prod_idParameter = prod_id.HasValue ?
                new ObjectParameter("Prod_id", prod_id) :
                new ObjectParameter("Prod_id", typeof(decimal));
    
            var paginasParameter = paginas.HasValue ?
                new ObjectParameter("Paginas", paginas) :
                new ObjectParameter("Paginas", typeof(decimal));
    
            var formatoAluraParameter = formatoAlura.HasValue ?
                new ObjectParameter("FormatoAlura", formatoAlura) :
                new ObjectParameter("FormatoAlura", typeof(decimal));
    
            var formatoLarguraParameter = formatoLargura.HasValue ?
                new ObjectParameter("FormatoLargura", formatoLargura) :
                new ObjectParameter("FormatoLargura", typeof(decimal));
    
            var pesoParameter = peso.HasValue ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(decimal));
    
            var mioloCoresParameter = mioloCores != null ?
                new ObjectParameter("MioloCores", mioloCores) :
                new ObjectParameter("MioloCores", typeof(string));
    
            var mioloTipoPapelParameter = mioloTipoPapel != null ?
                new ObjectParameter("MioloTipoPapel", mioloTipoPapel) :
                new ObjectParameter("MioloTipoPapel", typeof(string));
    
            var mioloGramaturaParameter = mioloGramatura != null ?
                new ObjectParameter("MioloGramatura", mioloGramatura) :
                new ObjectParameter("MioloGramatura", typeof(string));
    
            var mioloObservacoesParameter = mioloObservacoes != null ?
                new ObjectParameter("MioloObservacoes", mioloObservacoes) :
                new ObjectParameter("MioloObservacoes", typeof(string));
    
            var capaCoresParameter = capaCores != null ?
                new ObjectParameter("CapaCores", capaCores) :
                new ObjectParameter("CapaCores", typeof(string));
    
            var capaTipoPapelParameter = capaTipoPapel != null ?
                new ObjectParameter("CapaTipoPapel", capaTipoPapel) :
                new ObjectParameter("CapaTipoPapel", typeof(string));
    
            var capaGramaturaParameter = capaGramatura != null ?
                new ObjectParameter("CapaGramatura", capaGramatura) :
                new ObjectParameter("CapaGramatura", typeof(string));
    
            var capaOrelhaParameter = capaOrelha != null ?
                new ObjectParameter("CapaOrelha", capaOrelha) :
                new ObjectParameter("CapaOrelha", typeof(string));
    
            var capaAcabamentoParameter = capaAcabamento != null ?
                new ObjectParameter("CapaAcabamento", capaAcabamento) :
                new ObjectParameter("CapaAcabamento", typeof(string));
    
            var capaObservacoesParameter = capaObservacoes != null ?
                new ObjectParameter("CapaObservacoes", capaObservacoes) :
                new ObjectParameter("CapaObservacoes", typeof(string));
    
            var capaAcabamentoDaLombadaParameter = capaAcabamentoDaLombada != null ?
                new ObjectParameter("CapaAcabamentoDaLombada", capaAcabamentoDaLombada) :
                new ObjectParameter("CapaAcabamentoDaLombada", typeof(string));
    
            var cadernoPaginasParameter = cadernoPaginas.HasValue ?
                new ObjectParameter("CadernoPaginas", cadernoPaginas) :
                new ObjectParameter("CadernoPaginas", typeof(decimal));
    
            var cadernoAlturaParameter = cadernoAltura.HasValue ?
                new ObjectParameter("CadernoAltura", cadernoAltura) :
                new ObjectParameter("CadernoAltura", typeof(decimal));
    
            var cadernoLarguraParameter = cadernoLargura.HasValue ?
                new ObjectParameter("CadernoLargura", cadernoLargura) :
                new ObjectParameter("CadernoLargura", typeof(decimal));
    
            var cadernoTipoParameter = cadernoTipo.HasValue ?
                new ObjectParameter("CadernoTipo", cadernoTipo) :
                new ObjectParameter("CadernoTipo", typeof(int));
    
            var cadernoTipoOutrosParameter = cadernoTipoOutros != null ?
                new ObjectParameter("CadernoTipoOutros", cadernoTipoOutros) :
                new ObjectParameter("CadernoTipoOutros", typeof(string));
    
            var cadernoPesoParameter = cadernoPeso.HasValue ?
                new ObjectParameter("CadernoPeso", cadernoPeso) :
                new ObjectParameter("CadernoPeso", typeof(decimal));
    
            var cadernoMioloCoresParameter = cadernoMioloCores != null ?
                new ObjectParameter("CadernoMioloCores", cadernoMioloCores) :
                new ObjectParameter("CadernoMioloCores", typeof(string));
    
            var cadernoMioloTipoPapelParameter = cadernoMioloTipoPapel != null ?
                new ObjectParameter("CadernoMioloTipoPapel", cadernoMioloTipoPapel) :
                new ObjectParameter("CadernoMioloTipoPapel", typeof(string));
    
            var cadernoMioloGramaturaParameter = cadernoMioloGramatura != null ?
                new ObjectParameter("CadernoMioloGramatura", cadernoMioloGramatura) :
                new ObjectParameter("CadernoMioloGramatura", typeof(string));
    
            var cadernoMioloObservacoesParameter = cadernoMioloObservacoes != null ?
                new ObjectParameter("CadernoMioloObservacoes", cadernoMioloObservacoes) :
                new ObjectParameter("CadernoMioloObservacoes", typeof(string));
    
            var cadernoCapaCoresParameter = cadernoCapaCores != null ?
                new ObjectParameter("CadernoCapaCores", cadernoCapaCores) :
                new ObjectParameter("CadernoCapaCores", typeof(string));
    
            var cadernoCapaTipoPapelParameter = cadernoCapaTipoPapel != null ?
                new ObjectParameter("CadernoCapaTipoPapel", cadernoCapaTipoPapel) :
                new ObjectParameter("CadernoCapaTipoPapel", typeof(string));
    
            var cadernoCapaGramaturaParameter = cadernoCapaGramatura != null ?
                new ObjectParameter("CadernoCapaGramatura", cadernoCapaGramatura) :
                new ObjectParameter("CadernoCapaGramatura", typeof(string));
    
            var cadernoCapaOrelhaParameter = cadernoCapaOrelha != null ?
                new ObjectParameter("CadernoCapaOrelha", cadernoCapaOrelha) :
                new ObjectParameter("CadernoCapaOrelha", typeof(string));
    
            var cadernoCapaAcabamentoParameter = cadernoCapaAcabamento != null ?
                new ObjectParameter("CadernoCapaAcabamento", cadernoCapaAcabamento) :
                new ObjectParameter("CadernoCapaAcabamento", typeof(string));
    
            var cadernoCapaObservacoesParameter = cadernoCapaObservacoes != null ?
                new ObjectParameter("CadernoCapaObservacoes", cadernoCapaObservacoes) :
                new ObjectParameter("CadernoCapaObservacoes", typeof(string));
    
            var cadernoCapaAcabamentoDaLombadaParameter = cadernoCapaAcabamentoDaLombada != null ?
                new ObjectParameter("CadernoCapaAcabamentoDaLombada", cadernoCapaAcabamentoDaLombada) :
                new ObjectParameter("CadernoCapaAcabamentoDaLombada", typeof(string));
    
            var encarteTipoParameter = encarteTipo.HasValue ?
                new ObjectParameter("EncarteTipo", encarteTipo) :
                new ObjectParameter("EncarteTipo", typeof(int));
    
            var encarteAcabamentoParameter = encarteAcabamento != null ?
                new ObjectParameter("EncarteAcabamento", encarteAcabamento) :
                new ObjectParameter("EncarteAcabamento", typeof(string));
    
            var encartePapelParameter = encartePapel != null ?
                new ObjectParameter("EncartePapel", encartePapel) :
                new ObjectParameter("EncartePapel", typeof(string));
    
            var caixaFormatoParameter = caixaFormato.HasValue ?
                new ObjectParameter("CaixaFormato", caixaFormato) :
                new ObjectParameter("CaixaFormato", typeof(int));
    
            var caixaAcabamentoParameter = caixaAcabamento != null ?
                new ObjectParameter("CaixaAcabamento", caixaAcabamento) :
                new ObjectParameter("CaixaAcabamento", typeof(string));
    
            var caixaPapelParameter = caixaPapel != null ?
                new ObjectParameter("CaixaPapel", caixaPapel) :
                new ObjectParameter("CaixaPapel", typeof(string));
    
            var midiaParameter = midia.HasValue ?
                new ObjectParameter("Midia", midia) :
                new ObjectParameter("Midia", typeof(int));
    
            var observacoesGeraisParameter = observacoesGerais != null ?
                new ObjectParameter("ObservacoesGerais", observacoesGerais) :
                new ObjectParameter("ObservacoesGerais", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(string));
    
            var fotoCaminhoAbsolutoParameter = fotoCaminhoAbsoluto != null ?
                new ObjectParameter("FotoCaminhoAbsoluto", fotoCaminhoAbsoluto) :
                new ObjectParameter("FotoCaminhoAbsoluto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_U_FICHATECNICA", prod_idParameter, paginasParameter, formatoAluraParameter, formatoLarguraParameter, pesoParameter, mioloCoresParameter, mioloTipoPapelParameter, mioloGramaturaParameter, mioloObservacoesParameter, capaCoresParameter, capaTipoPapelParameter, capaGramaturaParameter, capaOrelhaParameter, capaAcabamentoParameter, capaObservacoesParameter, capaAcabamentoDaLombadaParameter, cadernoPaginasParameter, cadernoAlturaParameter, cadernoLarguraParameter, cadernoTipoParameter, cadernoTipoOutrosParameter, cadernoPesoParameter, cadernoMioloCoresParameter, cadernoMioloTipoPapelParameter, cadernoMioloGramaturaParameter, cadernoMioloObservacoesParameter, cadernoCapaCoresParameter, cadernoCapaTipoPapelParameter, cadernoCapaGramaturaParameter, cadernoCapaOrelhaParameter, cadernoCapaAcabamentoParameter, cadernoCapaObservacoesParameter, cadernoCapaAcabamentoDaLombadaParameter, encarteTipoParameter, encarteAcabamentoParameter, encartePapelParameter, caixaFormatoParameter, caixaAcabamentoParameter, caixaPapelParameter, midiaParameter, observacoesGeraisParameter, fotoParameter, fotoCaminhoAbsolutoParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
